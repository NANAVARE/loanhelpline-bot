const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const { GoogleSpreadsheet } = require("google-spreadsheet");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());

// ЁЯЯв WhatsApp Config
const token = process.env.WHATSAPP_TOKEN || "YOUR_WHATSAPP_TOKEN";
const phoneNumberId = process.env.PHONE_NUMBER_ID || "YOUR_PHONE_NUMBER_ID";

// ЁЯЯв Google Sheet Config
const sheetId = "1SASOVVvP4zVdqvaBUBjqkjeMcrmgU_dYmlfuWKvX2yU";
const sheetName = "Sheet1";

// ЁЯЯв User state tracking
const userState = {};
const userData = {}; // to store user responses before sending to sheet

// тЬЕ Root check
app.get("/", (req, res) => {
  res.send("тЬЕ Loan Helpline Bot is running.");
});

// тЬЕ WhatsApp Webhook Verification
app.get("/webhook", (req, res) => {
  const mode = req.query["hub.mode"];
  const token = req.query["hub.verify_token"];
  const challenge = req.query["hub.challenge"];

  if (mode && token === "loanhelpline_verify_token") {
    console.log("тЬЕ Webhook verified!");
    res.status(200).send(challenge);
  } else {
    res.sendStatus(403);
  }
});

// тЬЕ WhatsApp Webhook Message Handler
app.post("/webhook", async (req, res) => {
  const entry = req.body.entry?.[0];
  const changes = entry?.changes?.[0];
  const message = changes?.value?.messages?.[0];

  if (message && message.from) {
    const from = message.from;
    const msgBody = message.text?.body?.trim().toLowerCase();

    const state = userState[from] || "initial";
    let reply = "";

    const isTrigger = ["hi", "hello", "loan", "i want to apply for a loan"].some(keyword =>
      msgBody.includes(keyword)
    );

    if (isTrigger) {
      reply = `ЁЯЩП Loan Helpline рд╡рд░ рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ!\nрдХреГрдкрдпрд╛ рдЦрд╛рд▓реАрд▓рдкреИрдХреА рдПрдХ рдкрд░реНрдпрд╛рдп рдирд┐рд╡рдбрд╛:\n1я╕ПтГг Home Loan\n2я╕ПтГг Personal Loan\n3я╕ПтГг Balance Transfer\n4я╕ПтГг Business Loan\n5я╕ПтГг Mortgage Loan\n\nрдХреГрдкрдпрд╛ рдлрдХреНрдд рдХреНрд░рдорд╛рдВрдХ рдЯрд╛рдХрд╛. (рдЙрджрд╛: 1)`;
      userState[from] = "ask_loan_type";
    } else if (state === "ask_loan_type" && ["1", "2", "3", "4", "5"].includes(msgBody)) {
      const loanTypes = {
        "1": "Home Loan",
        "2": "Personal Loan",
        "3": "Balance Transfer",
        "4": "Business Loan",
        "5": "Mortgage Loan"
      };
      userData[from] = { loanType: loanTypes[msgBody] };
      reply = `тЬЕ рдЖрдкрдг рдирд┐рд╡рдбрд▓рдВ рдЖрд╣реЗ: ${loanTypes[msgBody]}\n\nЁЯУЭ Eligibility рд╕рд╛рдареА рдорд╛рд╣рд┐рддреА рдкрд╛рдард╡рд╛:\n- рдорд╛рд╕рд┐рдХ рдЙрддреНрдкрдиреНрди (рдЙрджрд╛: тВ╣30000)`;
      userState[from] = "ask_income";
    } else if (state === "ask_income" && msgBody.match(/тВ╣?\d{4,}/)) {
      userData[from].income = msgBody.replace(/тВ╣|,/g, "");
      reply = `ЁЯМН рддреБрдордЪрдВ рд╢рд╣рд░/рдЧрд╛рд╡ рд╕рд╛рдВрдЧрд╛ (рдЙрджрд╛: Pune)`;
      userState[from] = "ask_city";
    } else if (state === "ask_city" && msgBody.length >= 3) {
      userData[from].city = msgBody;
      reply = `ЁЯТ░ рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд┐рддреА рд▓реЛрди рд╣рд╡рд╛ рдЖрд╣реЗ? (рдЙрджрд╛: тВ╣15 рд▓рд╛рдЦ)`;
      userState[from] = "ask_amount";
    } else if (state === "ask_amount" && msgBody.match(/тВ╣?.+/)) {
      userData[from].amount = msgBody.replace(/тВ╣|,/g, "");
      reply = `ЁЯУЭ рддреБрдордЪрдВ рдкреВрд░реНрдг рдирд╛рд╡ рд▓рд┐рд╣рд╛ (рдЙрджрд╛: Vinayak Nanavare)`;
      userState[from] = "ask_name";
    } else if (state === "ask_name" && msgBody.length > 2) {
      userData[from].name = msgBody;
      userData[from].phone = from;
      userState[from] = "done";

      // тЬЕ Send to Google Sheet
      try {
        await axios.post("https://loanhelpline-bot.onrender.com/lead", userData[from]);
        reply = `ЁЯОЙ рдзрдиреНрдпрд╡рд╛рдж ${msgBody}! рддреБрдордЪрдВ рд▓реЛрди рдЕрд░реНрдЬ рдЖрдореНрд╣реА рдкреНрд░рд╛рдкреНрдд рдХреЗрд▓рдВ рдЖрд╣реЗ.\nрдЖрдордЪреЗ рдкреНрд░рддрд┐рдирд┐рдзреА рд▓рд╡рдХрд░рдЪ рд╕рдВрдкрд░реНрдХ рдХрд░рддреАрд▓.`;
      } catch (err) {
        reply = `тЭЧ рдХреНрд╖рдорд╕реНрд╡, рдбреЗрдЯрд╛ рд╕реЗрд╡ рдХрд░рдгреНрдпрд╛рдд рдЕрдбрдЪрдг рдЖрд▓реА. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.`;
        console.error("тЭМ Google Sheet sync error:", err.message);
      }
    } else {
      reply = `тЭЧ рдХреГрдкрдпрд╛ 1 рддреЗ 5 рдкреИрдХреА рдПрдХ рдХреНрд░рдорд╛рдВрдХ рдЯрд╛рдХрд╛ рдХрд┐рдВрд╡рд╛ 'loan' рд▓рд┐рд╣рд╛`;
    }

    // тЬЕ Send reply to WhatsApp
    try {
      await axios.post(
        `https://graph.facebook.com/v19.0/${phoneNumberId}/messages`,
        {
          messaging_product: "whatsapp",
          to: from,
          text: { body: reply }
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json"
          }
        }
      );
      console.log(`ЁЯУд Reply sent to ${from}: ${reply}`);
    } catch (err) {
      console.error("тЭМ Error sending WhatsApp message:", err.response?.data || err.message);
    }
  }

  res.sendStatus(200);
});

// тЬЕ Google Sheets Lead Save Endpoint
app.post("/lead", async (req, res) => {
  const { name, phone, city, income, loanType, amount } = req.body;

  try {
    const doc = new GoogleSpreadsheet(sheetId);
    await doc.useServiceAccountAuth({
      client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n")
    });

    await doc.loadInfo();
    const sheet = doc.sheetsByTitle[sheetName];

    await sheet.addRow({
      Name: name,
      Phone: phone,
      City: city,
      Income: income,
      LoanType: loanType,
      Amount: amount
    });

    console.log("тЬЕ Lead saved to Google Sheet:", name);
    res.status(200).send("Lead saved");
  } catch (err) {
    console.error("тЭМ Error saving to Google Sheet:", err);
    res.status(500).send("Error saving lead");
  }
});

// тЬЕ Start server
app.listen(PORT, () => {
  console.log(`ЁЯЪА Server running on http://localhost:${PORT}`);
});
