const express = require('express');
const bodyParser = require('body-parser');
const { google } = require('googleapis');
const axios = require('axios');
const app = express();
const port = process.env.PORT || 10000;

app.use(bodyParser.json());

// тЬЕ Constants
const WHATSAPP_API_URL = `https://graph.facebook.com/v18.0/${process.env.WHATSAPP_PHONE_NUMBER_ID}/messages`;
const WHATSAPP_TOKEN = process.env.WHATSAPP_TOKEN;
const SHEET_ID = process.env.SHEET_ID;
const ADMIN_PHONE = '918329569608';

// тЬЕ Google Sheets Auth
const SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];
const auth = new google.auth.GoogleAuth({
  credentials: JSON.parse(process.env.GOOGLE_CREDENTIALS_JSON),
  scopes: SCOPES,
});

// тЬЕ Loan Options
const loanTypes = {
  '1': 'Home Loan',
  '2': 'Personal Loan',
  '3': 'Transfer Your Loan',
  '4': 'Business Loan',
  '5': 'Mortgage Loan',
  '6': 'Industrial Property Loan',
  '7': 'Commercial Property Loan',
};

// тЬЕ User State Tracker
const userState = {}; // phone => { step, ... }

// тЬЕ Blocked Numbers
const blacklistedNumbers = ['919599816917'];

// тЬЕ Send WhatsApp Text Message
const sendWhatsAppMessage = async (phone, message) => {
  try {
    await axios.post(
      WHATSAPP_API_URL,
      {
        messaging_product: 'whatsapp',
        to: phone,
        text: { body: message },
      },
      {
        headers: {
          Authorization: `Bearer ${WHATSAPP_TOKEN}`,
          'Content-Type': 'application/json',
        },
      }
    );
    console.log(`ЁЯУд Reply sent to ${phone}: ${message}`);
  } catch (error) {
    console.error('тЭМ Error sending WhatsApp message:', error.response?.data || error.message);
  }
};

// тЬЕ Save Lead to Google Sheet
const saveLeadToSheet = async (lead) => {
  try {
    const client = await auth.getClient();
    const sheets = google.sheets({ version: 'v4', auth: client });
    const now = new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });

    const values = [[
      now,
      lead.name,
      lead.phone,
      lead.city,
      lead.income,
      lead.loanType,
      lead.amount,
      'New Lead',
      'WhatsApp Bot'
    ]];

    const result = await sheets.spreadsheets.values.append({
      spreadsheetId: SHEET_ID,
      range: 'Sheet1!A2',
      valueInputOption: 'USER_ENTERED',
      requestBody: { values },
    });

    console.log('тЬЕ Lead successfully saved to Google Sheet:', result.data.updates);
  } catch (err) {
    console.error('тЭМ Error saving lead to Google Sheet:', err.response?.data || err.message);
  }
};

// тЬЕ Notify Admin
const notifyAdmin = async (lead) => {
  const msg = `тЪая╕П рдирд╡реАрди рд▓реЛрди рд▓реАрдб:\nЁЯСд рдирд╛рд╡: ${lead.name}\nЁЯУЮ рдирдВрдмрд░: ${lead.phone}\nЁЯПж Loan Type: ${lead.loanType}\nЁЯТ░ рдЙрддреНрдкрдиреНрди: ${lead.income}\nЁЯМН рд╢рд╣рд░: ${lead.city}\nЁЯУЙ рд░рдХреНрдХрдо: ${lead.amount}`;
  await sendWhatsAppMessage(ADMIN_PHONE, msg);
};

// тЬЕ Webhook: POST Handler
app.post('/webhook', async (req, res) => {
  const message = req.body.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
  if (!message) return res.sendStatus(200);

  const phone = message.from;
  const text = message.text?.body?.trim();
  if (!text) return res.sendStatus(200);

  // ЁЯЫС Block blacklisted numbers
  if (blacklistedNumbers.includes(phone)) {
    console.log(`тЪая╕П рдмреНрд▓реЕрдХрд▓рд┐рд╕реНрдЯреЗрдб рдирдВрдмрд░ (${phone}) тАУ рдореЗрд╕реЗрдЬ рдмреНрд▓реЙрдХ рдХреЗрд▓рд╛.`);
    return res.sendStatus(200);
  }

  const user = userState[phone] || { step: 0, phone };

  switch (user.step) {
    case 0:
      await sendWhatsAppMessage(
        phone,
        `Loan рд╕рд╛рдареА рдХреНрд░рдорд╛рдВрдХ рдЯрд╛рдХрд╛:\n1я╕ПтГг Home Loan\n2я╕ПтГг Personal Loan\n3я╕ПтГг Transfer Your Loan\n4я╕ПтГг Business Loan\n5я╕ПтГг Mortgage Loan\n6я╕ПтГг Industrial Property Loan\n7я╕ПтГг Commercial Property Loan\n\nрдХреГрдкрдпрд╛ рдлрдХреНрдд рдХреНрд░рдорд╛рдВрдХ рдЯрд╛рдХрд╛. (рдЙрджрд╛: 1)`
      );
      user.step = 1;
      break;

    case 1:
      user.loanType = loanTypes[text];
      if (!user.loanType) {
        return await sendWhatsAppMessage(phone, 'тЭМ рдЪреБрдХреАрдЪрд╛ рдкрд░реНрдпрд╛рдп. рдХреГрдкрдпрд╛ 1 рддреЗ 7 рдордзреАрд▓ рдХреНрд░рдорд╛рдВрдХ рдЯрд╛рдХрд╛.');
      }
      await sendWhatsAppMessage(phone, `тЬЕ рдЖрдкрдг рдирд┐рд╡рдбрд▓рдВ рдЖрд╣реЗ: ЁЯФБ ${user.loanType}\nЁЯУЭ Eligibility рд╕рд╛рдареА рдорд╛рд╣рд┐рддреА рдкрд╛рдард╡рд╛:\n- рдорд╛рд╕рд┐рдХ рдЙрддреНрдкрдиреНрди (рдЙрджрд╛: тВ╣30000)`);
      user.step = 2;
      break;

    case 2:
      user.income = text;
      await sendWhatsAppMessage(phone, 'ЁЯМН рддреБрдордЪрдВ рд╢рд╣рд░/рдЧрд╛рд╡ рд╕рд╛рдВрдЧрд╛ (рдЙрджрд╛: Pune)');
      user.step = 3;
      break;

    case 3:
      user.city = text;
      await sendWhatsAppMessage(phone, 'ЁЯТ░ рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд┐рддреА рд▓реЛрди рд╣рд╡рд╛ рдЖрд╣реЗ? (рдЙрджрд╛: тВ╣15 рд▓рд╛рдЦ)');
      user.step = 4;
      break;

    case 4:
      user.amount = text;
      await sendWhatsAppMessage(phone, 'ЁЯШЗ рдирд╛рд╡ рд╕рд╛рдВрдЧрд╛ (рдЙрджрд╛: Rahul Patil)');
      user.step = 5;
      break;

    case 5:
      user.name = text;
      await sendWhatsAppMessage(phone, `ЁЯОЙ рдзрдиреНрдпрд╡рд╛рдж! рддреБрдордЪрдВ рд▓реЛрди рдЕрд░реНрдЬ рдЖрдореНрд╣реА рдкреНрд░рд╛рдкреНрдд рдХреЗрд▓рд╛ рдЖрд╣реЗ.\nрдЖрдордЪреЗ рдкреНрд░рддрд┐рдирд┐рдзреА рд▓рд╡рдХрд░рдЪ рд╕рдВрдкрд░реНрдХ рдХрд░рддреАрд▓.`);
      await notifyAdmin(user);
      await saveLeadToSheet(user); // тЬЕ Always save
      delete userState[phone];
      break;
  }

  userState[phone] = user;
  res.sendStatus(200);
});

// тЬЕ Webhook GET Handler (Verification)
app.get('/webhook', (req, res) => {
  const verify_token = process.env.META_VERIFY_TOKEN;
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode && token && mode === 'subscribe' && token === verify_token) {
    console.log('тЬЕ Webhook Verified');
    res.status(200).send(challenge);
  } else {
    res.sendStatus(403);
  }
});

// тЬЕ Root Route
app.get('/', (req, res) => {
  res.send('тЬЕ LoanHelpline Bot рдЪрд╛рд▓реВ рдЖрд╣реЗ');
});

// тЬЕ Start Server
app.listen(port, () => {
  console.log(`тЬЕ LoanHelpline Bot рдЪрд╛рд▓реВ рдЖрд╣реЗ рдкреЛрд░реНрдЯ ${port}`);
});
