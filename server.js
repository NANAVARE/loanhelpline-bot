const express = require('express');
const bodyParser = require('body-parser');
const { google } = require('googleapis');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 10000;

app.use(bodyParser.json());

// Load environment variables
const WHATSAPP_API_URL = `https://graph.facebook.com/v18.0/${process.env.WHATSAPP_PHONE_NUMBER_ID}/messages`;
const WHATSAPP_TOKEN = process.env.WHATSAPP_TOKEN;
const SHEET_ID = process.env.SHEET_ID;

const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS_JSON);

const auth = new google.auth.GoogleAuth({
  credentials,
  scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
});

const loanTypes = {
  '1': 'Home Loan',
  '2': 'Personal Loan',
  '3': 'Transfer Your Loan',
  '4': 'Business Loan',
  '5': 'Mortgage Loan',
  '6': 'Industrial Property Loan',
  '7': 'Commercial Property Loan',
};

const sheetRanges = {
  'Home Loan': 'Home Loan Offers!A2:G2',
  'Personal Loan': 'Personal Loan Offers!A2:G2',
  'Transfer Your Loan': 'Transfer Loan Offers!A2:G2',
  'Business Loan': 'Business Loan Offers!A2:G2',
  'Mortgage Loan': 'Mortgage Loan Offers!A2:G2',
  'Industrial Property Loan': 'Industrial Property Offers!A2:G2',
  'Commercial Property Loan': 'Commercial Property Offers!A2:G2',
};

const userState = {}; // phone => { step, loanType, income, city, amount, name }

const sendWhatsAppMessage = async (phone, message) => {
  try {
    await axios.post(
      WHATSAPP_API_URL,
      {
        messaging_product: 'whatsapp',
        to: phone,
        text: { body: message },
      },
      {
        headers: {
          Authorization: `Bearer ${WHATSAPP_TOKEN}`,
          'Content-Type': 'application/json',
        },
      }
    );
    console.log(`ЁЯУд Reply sent to ${phone}: ${message}`);
  } catch (error) {
    console.error('тЭМ Error sending WhatsApp message:', error.response?.data || error.message);
  }
};

const getLoanOfferFromSheet = async (loanType) => {
  try {
    const client = await auth.getClient();
    const sheets = google.sheets({ version: 'v4', auth: client });
    const range = sheetRanges[loanType];
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range,
    });
    return response.data.values[0];
  } catch (err) {
    console.error(`тЭМ Error fetching Google Sheet for ${loanType}:`, err.message);
    return null;
  }
};

const sendLoanOffer = async (phone, loanType) => {
  const offer = await getLoanOfferFromSheet(loanType);
  if (!offer) {
    return sendWhatsAppMessage(phone, 'тЪая╕П рд╕рдзреНрдпрд╛ рдСрдлрд░ рдЙрдкрд▓рдмреНрдз рдирд╛рд╣реА.');
  }

  const message = `ЁЯПж ${offer[0]} рдСрдлрд░\nЁЯТ░ рд╡реНрдпрд╛рдЬрджрд░: ${offer[1]}\nЁЯз╛ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдлреА: ${offer[2]}\nЁЯУД рдЯреЙрдк-рдЕрдк: ${offer[3]}\nЁЯУЕ рд╡реИрдзрддрд╛: ${offer[4]}\nЁЯУЭ рд╡рд┐рд╢реЗрд╖ рдорд╛рд╣рд┐рддреА: ${offer[5]}\nLoanHelpline рд╕реЗрд╡реЗрд╕рд╛рдареА рдзрдиреНрдпрд╡рд╛рдж!`;
  await sendWhatsAppMessage(phone, message);
};

app.post('/webhook', async (req, res) => {
  const message = req.body.entry?.[0]?.changes?.[0]?.value?.messages?.[0];
  if (!message) return res.sendStatus(200);

  const phone = message.from;
  const text = message.text?.body.trim();
  const user = userState[phone] || { step: 0 };

  switch (user.step) {
    case 0:
      await sendWhatsAppMessage(
        phone,
        `Loan рд╕рд╛рдареА рдХреНрд░рдорд╛рдВрдХ рдЯрд╛рдХрд╛:\n1я╕ПтГг Home Loan\n2я╕ПтГг Personal Loan\n3я╕ПтГг Transfer Your Loan\n4я╕ПтГг Business Loan\n5я╕ПтГг Mortgage Loan\n6я╕ПтГг Industrial Property Loan\n7я╕ПтГг Commercial Property Loan\n\nрдХреГрдкрдпрд╛ рдлрдХреНрдд рдХреНрд░рдорд╛рдВрдХ рдЯрд╛рдХрд╛. (рдЙрджрд╛: 1)`
      );
      user.step = 1;
      break;
    case 1:
      user.loanType = loanTypes[text];
      if (!user.loanType) {
        return await sendWhatsAppMessage(phone, 'тЭМ рдЪреБрдХреАрдЪрд╛ рдкрд░реНрдпрд╛рдп. рдХреГрдкрдпрд╛ 1 рддреЗ 7 рдордзреАрд▓ рдХреНрд░рдорд╛рдВрдХ рдЯрд╛рдХрд╛.');
      }
      await sendWhatsAppMessage(phone, `тЬЕ рдЖрдкрдг рдирд┐рд╡рдбрд▓рдВ рдЖрд╣реЗ: ЁЯФБ ${user.loanType}\nЁЯУЭ Eligibility рд╕рд╛рдареА рдорд╛рд╣рд┐рддреА рдкрд╛рдард╡рд╛:\n- рдорд╛рд╕рд┐рдХ рдЙрддреНрдкрдиреНрди (рдЙрджрд╛: тВ╣30000)`);
      user.step = 2;
      break;
    case 2:
      user.income = text;
      await sendWhatsAppMessage(phone, 'ЁЯМН рддреБрдордЪрдВ рд╢рд╣рд░/рдЧрд╛рд╡ рд╕рд╛рдВрдЧрд╛ (рдЙрджрд╛: Pune)');
      user.step = 3;
      break;
    case 3:
      user.city = text;
      await sendWhatsAppMessage(phone, 'ЁЯТ░ рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд┐рддреА рд▓реЛрди рд╣рд╡рд╛ рдЖрд╣реЗ? (рдЙрджрд╛: тВ╣15 рд▓рд╛рдЦ)');
      user.step = 4;
      break;
    case 4:
      user.amount = text;
      await sendWhatsAppMessage(phone, 'ЁЯШЗ рдирд╛рд╡ рд╕рд╛рдВрдЧрд╛ (рдЙрджрд╛: Rahul Patil)');
      user.step = 5;
      break;
    case 5:
      user.name = text;
      await sendWhatsAppMessage(phone, 'ЁЯУи Vinayak рд▓рд╛ рд▓реАрдб рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдкрд╛рдард╡рд▓реЗ.');
      await sendLoanOffer(phone, user.loanType);
      delete userState[phone];
      break;
  }

  userState[phone] = user;
  res.sendStatus(200);
});

app.get('/', (req, res) => {
  res.send('тЬЕ LoanHelpline Bot рдЪрд╛рд▓реВ рдЖрд╣реЗ');
});

app.listen(port, () => {
  console.log(`тЬЕ LoanHelpline Bot рдЪрд╛рд▓реВ рдЖрд╣реЗ рдкреЛрд░реНрдЯ ${port}`);
});
